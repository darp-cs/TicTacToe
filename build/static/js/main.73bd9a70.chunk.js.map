{"version":3,"sources":["img/r2h.png","img/fellowships.png","Components/Square/index.js","Components/ResetButton/index.js","Components/Board/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","props","className","value","onClick","ResetButton","reset","Board","intitalBoard","Array","fill","useState","squares","setSquares","playerXIsNext","setPlayerXIsNext","winner","calculateWinner","renderSquare","i","e","newSquares","winnerDeclared","Boolean","squareAlreadyFilled","handleClick","getStatus","length","isBoardFull","line","a","b","c","src","r2h","alt","fellowship","App","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,8KCe5BC,EAZA,SAACC,GAEZ,OACI,oCACI,4BAAQC,UAAS,iBAAYD,EAAME,OAC/BC,QAASH,EAAMG,SACdH,EAAME,SCKRE,EAXK,SAACJ,GAEjB,OACI,oCACI,4BAAQC,UAAU,gBAAgBE,QAASH,EAAMK,OAAjD,iB,gCC4IGC,EA7ID,WACV,IAAMC,EAAeC,MAAM,GAAGC,KAAK,MADnB,EAEcC,mBAASH,GAFvB,mBAETI,EAFS,KAEAC,EAFA,OAG0BF,oBAAS,GAHnC,mBAGTG,EAHS,KAGMC,EAHN,KAMVC,EAASC,EAAgBL,GAazBM,EAAe,SAACC,GAClB,OAAO,kBAAC,EAAD,CAAQhB,MAAOS,EAAQO,GAAIf,QAAS,kBAZ3B,SAACgB,GACjB,IAAMC,EAAU,YAAOT,GACjBU,EAAiBC,QAAQN,EAAgBL,IACzCY,EAAsBD,QAAQF,EAAWD,IAC3CE,GAAkBE,IAEtBH,EAAWD,GAAKN,EAAgB,IAAM,IACtCD,EAAWQ,GACXN,GAAkBD,IAKdW,CAAYN,OAcpB,SAASO,IACL,OAAIV,EACO,0BAA4BA,EAC/B,aAbZ,SAAqBJ,GACjB,IAAK,IAAIO,EAAI,EAAGA,EAAIP,EAAQe,OAAQR,IAChC,GAAkB,MAAdP,EAAQO,GACR,OAAO,EAGf,OAAO,EAQIS,CAAYhB,GACZ,QAEA,2BAA6BE,EAAgB,IAAM,KAgBlE,SAASG,EAAgBL,GAoBrB,IAdA,IAcA,MAdc,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAMX,eAAwB,CAAnB,IAAIiB,EAAI,KAAW,cACFA,EADE,GACbC,EADa,KACVC,EADU,KACPC,EADO,KAEpB,GACIpB,EAAQkB,IACRlB,EAAQkB,KAAOlB,EAAQmB,IACvBnB,EAAQkB,KAAOlB,EAAQoB,GAEvB,OAAOpB,EAAQkB,GAKvB,OAAO,KAIX,OACI,oCACI,0BAAM5B,UAAS,wCAEVc,GAAUU,MAAgB,0BAA4BV,EAAS,eAC3DA,GAA0B,UAAhBU,IACM,UAAhBA,IAA0B,OAAS,SACjCZ,EAAgB,IAAM,MAI7B,yBAAKZ,UAAU,QACX,yBAAK+B,IAAKC,IAAKC,IAAI,aACnB,yBAAKF,IAAKG,IAAYD,IAAI,gBAE9B,yBAAKjC,UAAU,UACVwB,KAGL,yBAAKxB,UAAU,oBACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,cACVgB,EAAa,GACbA,EAAa,GACbA,EAAa,IAElB,yBAAKhB,UAAU,cACVgB,EAAa,GACbA,EAAa,GACbA,EAAa,IAElB,yBAAKhB,UAAU,cACVgB,EAAa,GACbA,EAAa,GACbA,EAAa,KAKtB,kBAAC,EAAD,CAAaZ,MAtFf,WACVO,EAAWL,GACXO,GAAiB,UC1CVsB,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCIcd,QACW,cAA7Be,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.73bd9a70.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/r2h.175c9dae.png\";","module.exports = __webpack_public_path__ + \"static/media/fellowships.be71a5fb.png\";","import React from 'react';\n\n// Creating a component that will represent each square on my board.\nconst Square = (props) => {\n\n    return (\n        <>\n            <button className={`square ${props.value}`}\n                onClick={props.onClick}>\n                {props.value}\n            </button>\n        </>\n    )\n}\n\nexport default Square;","import React from 'react';\n\n// Creating a component that will represent each square on my board.\nconst ResetButton = (props) => {\n\n    return (\n        <>\n            <button className=\"reset--button\" onClick={props.reset}>\n                Reset game!\n            </button>\n        </>\n    )\n}\n\nexport default ResetButton;","import React, { useState } from 'react';\nimport Square from '../Square/index';\nimport ResetButton from '../ResetButton/index';\nimport r2h from '../../img/r2h.png'\nimport fellowship from '../../img/fellowships.png'\n\nconst Board = () => {\n    const intitalBoard = Array(9).fill(null)\n    const [squares, setSquares] = useState(intitalBoard)\n    const [playerXIsNext, setPlayerXIsNext] = useState(true)\n\n\n    const winner = calculateWinner(squares)\n\n    const handleClick = (e) => {\n        const newSquares = [...squares]\n        const winnerDeclared = Boolean(calculateWinner(squares))\n        const squareAlreadyFilled = Boolean(newSquares[e])\n        if (winnerDeclared || squareAlreadyFilled) return\n\n        newSquares[e] = playerXIsNext ? 'X' : 'O'\n        setSquares(newSquares)\n        setPlayerXIsNext(!playerXIsNext)\n    }\n\n    const renderSquare = (i) => {\n        return <Square value={squares[i]} onClick={() =>\n            handleClick(i)} />\n    }\n\n\n    function isBoardFull(squares) {\n        for (let i = 0; i < squares.length; i++) {\n            if (squares[i] == null) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n\n    function getStatus() {\n        if (winner) {\n            return \"Congratulations Player \" + winner +\n                \", you won!\";\n        } else if (isBoardFull(squares)) {\n            return \"Draw!\";\n        } else {\n            return \"Next Player is Player: \" + (playerXIsNext ? \"X\" : \"O\");\n        }\n    }\n\n\n    const reset = () => {\n        setSquares(intitalBoard)\n        setPlayerXIsNext(true)\n    }\n\n    /**\n * calculateWinner (helper function)\n *\n * Parameter: squares (array of 'X', '0', or null)\n * Return value: 'X', 'O', or null\n */\n    function calculateWinner(squares) {\n        /* Squares indexes as they appear in UI:\n        0 1 2\n        3 4 5\n        6 7 8\n        */\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ]; // shows all of the winning combinations (\"lines\")\n\n        // Iterate over all the winning line combinations to see if the \n        // input squares array has one of the with all 'X's or all 'O's.\n        // If it does, return 'X' or 'O'.\n        for (let line of lines) {\n            const [a, b, c] = line;\n            if (\n                squares[a] &&\n                squares[a] === squares[b] &&\n                squares[a] === squares[c]\n            ) {\n                return squares[a];\n            }\n        }\n        // If none of the winning line combinations is contained in \n        // input squares array, return null...\n        return null;\n    }\n\n\n    return (\n        <>\n            <main className={`main--container \n            ${\n                (winner && getStatus() === \"Congratulations Player \" + winner + \", you won!\" ||\n                    !winner && getStatus() === \"Draw!\") ?\n                    (getStatus() === \"Draw!\" ? \"draw\" : \"winner\")\n                    : (playerXIsNext ? \"X\" : \"O\")\n                }`\n            }\n            >\n                <div className=\"logo\">\n                    <img src={r2h} alt=\"r2h logo\" />\n                    <img src={fellowship} alt=\"fellowship\" />\n                </div>\n                <div className=\"status\">\n                    {getStatus()}\n                </div>\n\n                <div className=\"board--container\">\n                    <div className=\"board\">\n                        <div className=\"board--row\">\n                            {renderSquare(0)}\n                            {renderSquare(1)}\n                            {renderSquare(2)}\n                        </div>\n                        <div className=\"board--row\">\n                            {renderSquare(3)}\n                            {renderSquare(4)}\n                            {renderSquare(5)}\n                        </div>\n                        <div className=\"board--row\">\n                            {renderSquare(6)}\n                            {renderSquare(7)}\n                            {renderSquare(8)}\n                        </div>\n                    </div>\n\n\n                    <ResetButton reset={reset} />\n                </div>\n\n            </main>\n        </>\n    )\n}\n\nexport default Board;\n\n\n","import React from 'react';\nimport './App.css';\nimport Board from './Components/Board/index'\n\n\nfunction App() {\n  return (\n    <>\n      <Board />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}